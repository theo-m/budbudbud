// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  invitedById   String?
  invitedAt     DateTime?

  invitedBy     User?          @relation("invite", fields: [invitedById], references: [id], onDelete: SetNull)
  invited       User[]         @relation("invite")
  accounts      Account[]
  sessions      Session[]
  groups        Group[]
  userGroups    UserGroup[]
  meetVotes     MeetVote[]
  groupMessages GroupMessage[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Group {
  id    String  @id @default(cuid())
  name  String?
  users User[]

  userGroups    UserGroup[]
  meets         Meet[]
  groupMessages GroupMessage[]

  @@map("groups")
}

model UserGroup {
  id      String  @id @default(cuid())
  userId  String
  groupId String
  admin   Boolean
  name    String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("user_groups")
}

model Meet {
  id        String   @id @default(cuid())
  groupId   String
  placeId   String?
  day       DateTime
  validated Boolean

  group Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  place Place? @relation(fields: [placeId], references: [id], onDelete: SetNull)

  meetVotes MeetVote[]

  @@unique([groupId, day])
  @@map("meets")
}

model Place {
  id      String  @id @default(cuid())
  name    String?
  address String
  seats   Int?

  meets     Meet[]
  meetVotes MeetVote[]

  @@map("places")
}

model MeetVote {
  id      String @id @default(cuid())
  meetId  String
  placeId String
  userId  String

  createdAt DateTime @default(now())


  meet  Meet  @relation(fields: [meetId], references: [id], onDelete: Cascade)
  place Place @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([meetId, placeId, userId])
  @@map("meet_votes")
}

model GroupMessage {
  id       String  @id @default(cuid())
  text     String
  authorId String?
  groupId  String

  createdAt DateTime @default(now())

  author User?  @relation(fields: [authorId], references: [id], onDelete: SetNull)
  group  Group? @relation(fields: [groupId], references: [id], onDelete: SetNull)

  @@map("group_message")
}
